/* tslint:disable */
/* eslint-disable */
/**
 * MyPersonalAccounting
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddBillingRequest,
  AddRepetitiveBillingRequest,
  BillingItemArrayRequestResult,
  CreatePortfolioRequest,
  DeleteBillingRequest,
  DeletePortfolioRequest,
  DeleteRepetitiveBillingRequest,
  EditBillingRequest,
  EditPortfolioRequest,
  EditRepetitiveBillingRequest,
  InsertNextBillingRequest,
  MarkAsCheckedRequest,
  PortfolioItemArrayRequestResult,
  RepetitiveBillingItemArrayRequestResult,
} from '../models';
import {
    AddBillingRequestFromJSON,
    AddBillingRequestToJSON,
    AddRepetitiveBillingRequestFromJSON,
    AddRepetitiveBillingRequestToJSON,
    BillingItemArrayRequestResultFromJSON,
    BillingItemArrayRequestResultToJSON,
    CreatePortfolioRequestFromJSON,
    CreatePortfolioRequestToJSON,
    DeleteBillingRequestFromJSON,
    DeleteBillingRequestToJSON,
    DeletePortfolioRequestFromJSON,
    DeletePortfolioRequestToJSON,
    DeleteRepetitiveBillingRequestFromJSON,
    DeleteRepetitiveBillingRequestToJSON,
    EditBillingRequestFromJSON,
    EditBillingRequestToJSON,
    EditPortfolioRequestFromJSON,
    EditPortfolioRequestToJSON,
    EditRepetitiveBillingRequestFromJSON,
    EditRepetitiveBillingRequestToJSON,
    InsertNextBillingRequestFromJSON,
    InsertNextBillingRequestToJSON,
    MarkAsCheckedRequestFromJSON,
    MarkAsCheckedRequestToJSON,
    PortfolioItemArrayRequestResultFromJSON,
    PortfolioItemArrayRequestResultToJSON,
    RepetitiveBillingItemArrayRequestResultFromJSON,
    RepetitiveBillingItemArrayRequestResultToJSON,
} from '../models';

export interface ApiPortfolioAddBillingPutRequest {
    addBillingRequest: AddBillingRequest;
}

export interface ApiPortfolioAddRepetitiveBillingPutRequest {
    addRepetitiveBillingRequest: AddRepetitiveBillingRequest;
}

export interface ApiPortfolioCreatePortfolioPutRequest {
    createPortfolioRequest: CreatePortfolioRequest;
}

export interface ApiPortfolioDeleteBillingDeleteRequest {
    deleteBillingRequest: DeleteBillingRequest;
}

export interface ApiPortfolioDeletePortfolioDeleteRequest {
    deletePortfolioRequest: DeletePortfolioRequest;
}

export interface ApiPortfolioDeleteRepetitiveBillingDeleteRequest {
    deleteRepetitiveBillingRequest: DeleteRepetitiveBillingRequest;
}

export interface ApiPortfolioEditBillingPostRequest {
    editBillingRequest: EditBillingRequest;
}

export interface ApiPortfolioEditPortfolioPostRequest {
    editPortfolioRequest: EditPortfolioRequest;
}

export interface ApiPortfolioEditRepetitiveBillingPostRequest {
    editRepetitiveBillingRequest: EditRepetitiveBillingRequest;
}

export interface ApiPortfolioGetBillingsPortfolioIdGetRequest {
    portfolioId: string;
}

export interface ApiPortfolioGetRepetitiveBillingsPortfolioIdGetRequest {
    portfolioId: string;
}

export interface ApiPortfolioInsertNextBillingPutRequest {
    insertNextBillingRequest: InsertNextBillingRequest;
}

export interface ApiPortfolioMarkAsCheckedPostRequest {
    markAsCheckedRequest: MarkAsCheckedRequest;
}

/**
 * 
 */
export class PortfolioApi extends runtime.BaseAPI {

    /**
     */
    async apiPortfolioAddBillingPutRaw(requestParameters: ApiPortfolioAddBillingPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.addBillingRequest === null || requestParameters.addBillingRequest === undefined) {
            throw new runtime.RequiredError('addBillingRequest','Required parameter requestParameters.addBillingRequest was null or undefined when calling apiPortfolioAddBillingPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Portfolio/AddBilling`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AddBillingRequestToJSON(requestParameters.addBillingRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiPortfolioAddBillingPut(addBillingRequest: AddBillingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiPortfolioAddBillingPutRaw({ addBillingRequest: addBillingRequest }, initOverrides);
    }

    /**
     */
    async apiPortfolioAddRepetitiveBillingPutRaw(requestParameters: ApiPortfolioAddRepetitiveBillingPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.addRepetitiveBillingRequest === null || requestParameters.addRepetitiveBillingRequest === undefined) {
            throw new runtime.RequiredError('addRepetitiveBillingRequest','Required parameter requestParameters.addRepetitiveBillingRequest was null or undefined when calling apiPortfolioAddRepetitiveBillingPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Portfolio/AddRepetitiveBilling`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AddRepetitiveBillingRequestToJSON(requestParameters.addRepetitiveBillingRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiPortfolioAddRepetitiveBillingPut(addRepetitiveBillingRequest: AddRepetitiveBillingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiPortfolioAddRepetitiveBillingPutRaw({ addRepetitiveBillingRequest: addRepetitiveBillingRequest }, initOverrides);
    }

    /**
     */
    async apiPortfolioCreatePortfolioPutRaw(requestParameters: ApiPortfolioCreatePortfolioPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createPortfolioRequest === null || requestParameters.createPortfolioRequest === undefined) {
            throw new runtime.RequiredError('createPortfolioRequest','Required parameter requestParameters.createPortfolioRequest was null or undefined when calling apiPortfolioCreatePortfolioPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Portfolio/CreatePortfolio`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePortfolioRequestToJSON(requestParameters.createPortfolioRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiPortfolioCreatePortfolioPut(createPortfolioRequest: CreatePortfolioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiPortfolioCreatePortfolioPutRaw({ createPortfolioRequest: createPortfolioRequest }, initOverrides);
    }

    /**
     */
    async apiPortfolioDeleteBillingDeleteRaw(requestParameters: ApiPortfolioDeleteBillingDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deleteBillingRequest === null || requestParameters.deleteBillingRequest === undefined) {
            throw new runtime.RequiredError('deleteBillingRequest','Required parameter requestParameters.deleteBillingRequest was null or undefined when calling apiPortfolioDeleteBillingDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Portfolio/DeleteBilling`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteBillingRequestToJSON(requestParameters.deleteBillingRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiPortfolioDeleteBillingDelete(deleteBillingRequest: DeleteBillingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiPortfolioDeleteBillingDeleteRaw({ deleteBillingRequest: deleteBillingRequest }, initOverrides);
    }

    /**
     */
    async apiPortfolioDeletePortfolioDeleteRaw(requestParameters: ApiPortfolioDeletePortfolioDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deletePortfolioRequest === null || requestParameters.deletePortfolioRequest === undefined) {
            throw new runtime.RequiredError('deletePortfolioRequest','Required parameter requestParameters.deletePortfolioRequest was null or undefined when calling apiPortfolioDeletePortfolioDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Portfolio/DeletePortfolio`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeletePortfolioRequestToJSON(requestParameters.deletePortfolioRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiPortfolioDeletePortfolioDelete(deletePortfolioRequest: DeletePortfolioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiPortfolioDeletePortfolioDeleteRaw({ deletePortfolioRequest: deletePortfolioRequest }, initOverrides);
    }

    /**
     */
    async apiPortfolioDeleteRepetitiveBillingDeleteRaw(requestParameters: ApiPortfolioDeleteRepetitiveBillingDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deleteRepetitiveBillingRequest === null || requestParameters.deleteRepetitiveBillingRequest === undefined) {
            throw new runtime.RequiredError('deleteRepetitiveBillingRequest','Required parameter requestParameters.deleteRepetitiveBillingRequest was null or undefined when calling apiPortfolioDeleteRepetitiveBillingDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Portfolio/DeleteRepetitiveBilling`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteRepetitiveBillingRequestToJSON(requestParameters.deleteRepetitiveBillingRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiPortfolioDeleteRepetitiveBillingDelete(deleteRepetitiveBillingRequest: DeleteRepetitiveBillingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiPortfolioDeleteRepetitiveBillingDeleteRaw({ deleteRepetitiveBillingRequest: deleteRepetitiveBillingRequest }, initOverrides);
    }

    /**
     */
    async apiPortfolioEditBillingPostRaw(requestParameters: ApiPortfolioEditBillingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.editBillingRequest === null || requestParameters.editBillingRequest === undefined) {
            throw new runtime.RequiredError('editBillingRequest','Required parameter requestParameters.editBillingRequest was null or undefined when calling apiPortfolioEditBillingPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Portfolio/EditBilling`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EditBillingRequestToJSON(requestParameters.editBillingRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiPortfolioEditBillingPost(editBillingRequest: EditBillingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiPortfolioEditBillingPostRaw({ editBillingRequest: editBillingRequest }, initOverrides);
    }

    /**
     */
    async apiPortfolioEditPortfolioPostRaw(requestParameters: ApiPortfolioEditPortfolioPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.editPortfolioRequest === null || requestParameters.editPortfolioRequest === undefined) {
            throw new runtime.RequiredError('editPortfolioRequest','Required parameter requestParameters.editPortfolioRequest was null or undefined when calling apiPortfolioEditPortfolioPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Portfolio/EditPortfolio`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EditPortfolioRequestToJSON(requestParameters.editPortfolioRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiPortfolioEditPortfolioPost(editPortfolioRequest: EditPortfolioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiPortfolioEditPortfolioPostRaw({ editPortfolioRequest: editPortfolioRequest }, initOverrides);
    }

    /**
     */
    async apiPortfolioEditRepetitiveBillingPostRaw(requestParameters: ApiPortfolioEditRepetitiveBillingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.editRepetitiveBillingRequest === null || requestParameters.editRepetitiveBillingRequest === undefined) {
            throw new runtime.RequiredError('editRepetitiveBillingRequest','Required parameter requestParameters.editRepetitiveBillingRequest was null or undefined when calling apiPortfolioEditRepetitiveBillingPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Portfolio/EditRepetitiveBilling`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EditRepetitiveBillingRequestToJSON(requestParameters.editRepetitiveBillingRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiPortfolioEditRepetitiveBillingPost(editRepetitiveBillingRequest: EditRepetitiveBillingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiPortfolioEditRepetitiveBillingPostRaw({ editRepetitiveBillingRequest: editRepetitiveBillingRequest }, initOverrides);
    }

    /**
     */
    async apiPortfolioGetBillingsPortfolioIdGetRaw(requestParameters: ApiPortfolioGetBillingsPortfolioIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BillingItemArrayRequestResult>> {
        if (requestParameters.portfolioId === null || requestParameters.portfolioId === undefined) {
            throw new runtime.RequiredError('portfolioId','Required parameter requestParameters.portfolioId was null or undefined when calling apiPortfolioGetBillingsPortfolioIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Portfolio/GetBillings/{portfolioId}`.replace(`{${"portfolioId"}}`, encodeURIComponent(String(requestParameters.portfolioId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BillingItemArrayRequestResultFromJSON(jsonValue));
    }

    /**
     */
    async apiPortfolioGetBillingsPortfolioIdGet(portfolioId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BillingItemArrayRequestResult> {
        const response = await this.apiPortfolioGetBillingsPortfolioIdGetRaw({ portfolioId: portfolioId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPortfolioGetPortfoliosGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PortfolioItemArrayRequestResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Portfolio/GetPortfolios`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PortfolioItemArrayRequestResultFromJSON(jsonValue));
    }

    /**
     */
    async apiPortfolioGetPortfoliosGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PortfolioItemArrayRequestResult> {
        const response = await this.apiPortfolioGetPortfoliosGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPortfolioGetRepetitiveBillingsPortfolioIdGetRaw(requestParameters: ApiPortfolioGetRepetitiveBillingsPortfolioIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RepetitiveBillingItemArrayRequestResult>> {
        if (requestParameters.portfolioId === null || requestParameters.portfolioId === undefined) {
            throw new runtime.RequiredError('portfolioId','Required parameter requestParameters.portfolioId was null or undefined when calling apiPortfolioGetRepetitiveBillingsPortfolioIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Portfolio/GetRepetitiveBillings/{portfolioId}`.replace(`{${"portfolioId"}}`, encodeURIComponent(String(requestParameters.portfolioId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RepetitiveBillingItemArrayRequestResultFromJSON(jsonValue));
    }

    /**
     */
    async apiPortfolioGetRepetitiveBillingsPortfolioIdGet(portfolioId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RepetitiveBillingItemArrayRequestResult> {
        const response = await this.apiPortfolioGetRepetitiveBillingsPortfolioIdGetRaw({ portfolioId: portfolioId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPortfolioInsertNextBillingPutRaw(requestParameters: ApiPortfolioInsertNextBillingPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.insertNextBillingRequest === null || requestParameters.insertNextBillingRequest === undefined) {
            throw new runtime.RequiredError('insertNextBillingRequest','Required parameter requestParameters.insertNextBillingRequest was null or undefined when calling apiPortfolioInsertNextBillingPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Portfolio/InsertNextBilling`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InsertNextBillingRequestToJSON(requestParameters.insertNextBillingRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiPortfolioInsertNextBillingPut(insertNextBillingRequest: InsertNextBillingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiPortfolioInsertNextBillingPutRaw({ insertNextBillingRequest: insertNextBillingRequest }, initOverrides);
    }

    /**
     */
    async apiPortfolioMarkAsCheckedPostRaw(requestParameters: ApiPortfolioMarkAsCheckedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.markAsCheckedRequest === null || requestParameters.markAsCheckedRequest === undefined) {
            throw new runtime.RequiredError('markAsCheckedRequest','Required parameter requestParameters.markAsCheckedRequest was null or undefined when calling apiPortfolioMarkAsCheckedPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Portfolio/MarkAsChecked`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MarkAsCheckedRequestToJSON(requestParameters.markAsCheckedRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiPortfolioMarkAsCheckedPost(markAsCheckedRequest: MarkAsCheckedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiPortfolioMarkAsCheckedPostRaw({ markAsCheckedRequest: markAsCheckedRequest }, initOverrides);
    }

}
